name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t pokedex-angular:${{ github.sha }} -t pokedex-angular:latest .

      - name: Save and compress Docker image
        run: docker save pokedex-angular:${{ github.sha }} | gzip > /tmp/pokedex-angular.tar.gz

      - name: Debug secrets
        run: |
          echo "Host: ${{ secrets.AZURE_HOST }}"
          echo "User: ${{ secrets.AZURE_USER }}"
          echo "Key length: ${#AZURE_SSH_KEY}"
          echo "Key first chars: ${AZURE_SSH_KEY:0:50}"
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}

      - name: Copy Docker image to Azure VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: '/tmp/pokedex-angular.tar.gz'
          target: '~/deployments/'
          strip_components: 1
          timeout: 10m

      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -e
            cd ~/deployments

            # Decompress and load image
            gunzip -c pokedex-angular.tar.gz | docker load

            # Stop and remove old container
            docker stop pokedex-angular 2>/dev/null || true
            docker rm pokedex-angular 2>/dev/null || true

            # Deploy new container
            docker run -d \
              --name pokedex-angular \
              --restart unless-stopped \
              -p 80:80 \
              pokedex-angular:${{ github.sha }}

            # Wait for container to start
            sleep 5

            # Verify container is running
            if ! docker ps | grep -q pokedex-angular; then
              echo "Container failed to start"
              docker logs pokedex-angular
              exit 1
            fi

            # Cleanup
            rm -f pokedex-angular.tar.gz
            docker image prune -f

            echo "Deployment successful!"

      - name: Cleanup local artifacts
        if: always()
        run: rm -f /tmp/pokedex-angular.tar.gz
