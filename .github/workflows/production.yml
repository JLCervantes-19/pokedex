name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'

env:
  IMAGE_NAME: pokedex-angular
  IMAGE_TAG: ${{ github.sha }}
  CONTAINER_NAME: pokedex-angular

jobs:
  build-and-deploy:
    runs-on: self-hosted
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 16
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar

      - name: Compress Docker image
        run: gzip -f /tmp/${{ env.IMAGE_NAME }}.tar

      - name: Copy Docker image to Azure VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: '/tmp/${{ env.IMAGE_NAME }}.tar.gz'
          target: '~/deployments/'
          strip_components: 1
          timeout: 10m

      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -e
            cd ~/deployments

            # Decompress and load image
            gunzip -f ${{ env.IMAGE_NAME }}.tar.gz
            docker load -i ${{ env.IMAGE_NAME }}.tar

            # Graceful shutdown with health check
            if docker ps -q -f name=${{ env.CONTAINER_NAME }}; then
              echo "Stopping existing container..."
              docker stop -t 30 ${{ env.CONTAINER_NAME }} || true
            fi

            # Remove old container and image
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker image prune -f --filter "label=app=${{ env.CONTAINER_NAME }}" --filter "dangling=false"

            # Deploy new container with health checks and resource limits
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              --memory="512m" \
              --cpus="1.0" \
              -p 80:80 \
              --health-cmd="curl -f http://localhost:80 || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=40s \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            timeout 60 sh -c 'until docker inspect --format="{{.State.Health.Status}}" ${{ env.CONTAINER_NAME }} | grep -q healthy; do sleep 2; done' || {
              echo "Container failed to become healthy"
              docker logs ${{ env.CONTAINER_NAME }}
              exit 1
            }

            # Cleanup
            rm -f ${{ env.IMAGE_NAME }}.tar
            docker system prune -f

            echo "Deployment successful!"

      - name: Verify deployment
        if: success()
        run: |
          curl -f -s -o /dev/null -w "%{http_code}" http://${{ secrets.AZURE_HOST }} || echo "Warning: Health check failed"
